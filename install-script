#!/usr/bin/env bash
# simple arch installer

if [ "$EUID" -ne 0 ]; then
   echo "Please run as root"
   exit
fi

# set start program time
readonly PROGSTARTTIME="$(date)"

#set -o errexit
#set -o nounset
#set -o pipefail

# get the name of the script from its file name
readonly PROGNAME=$(basename $0)

# get argurments
#readonly ARGS=$@

# get script dir
# https://stackoverflow.com/a/246128
readonly PROGDIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# set log file
readonly PROGLOG="$PROGDIR/$PROGNAME.log"
# activates log file
readonly LOGTOFILE=1

# TODO: replaces this global with another system
# check if notification mensage is going to be displayed.
warnNotification=0

printHelp() {
cat << HELPME

Simple install script for archlinux.

Usage: $PROGNAME

options
  -h, --help    shows this help

Examples
  $PROGNAME

HELPME
}

# color support, thanks https://gist.github.com/elucify/c7ccfee9f13b42f11f81
RESTORE=$(echo -en '\033[0m')
RED=$(echo -en '\033[00;31m')
GREEN=$(echo -en '\033[00;32m')
YELLOW=$(echo -en '\033[00;33m')
BLUE=$(echo -en '\033[00;34m')
MAGENTA=$(echo -en '\033[00;35m')
PURPLE=$(echo -en '\033[00;35m')
CYAN=$(echo -en '\033[00;36m')
LIGHTGRAY=$(echo -en '\033[00;37m')
LRED=$(echo -en '\033[01;31m')
LGREEN=$(echo -en '\033[01;32m')
LYELLOW=$(echo -en '\033[01;33m')
LBLUE=$(echo -en '\033[01;34m')
LMAGENTA=$(echo -en '\033[01;35m')
LPURPLE=$(echo -en '\033[01;35m')
LCYAN=$(echo -en '\033[01;36m')
WHITE=$(echo -en '\033[01;37m')
BOLD=$(echo -en '\033[1m')
UNDERLINE=$(echo -en '\033[4')

# exit code function
# exit the script with a custom exit code
# exitCode code_error verbose text_to_show
#   code_error
#     0...n : exit error code
#   verbose
#     1 : if on, then outputs to the screen the description of the exit code
#   text_to_show
#     text : custom text to show with the exit code
exitCode() {
  local exitCodeList
  exitCodeList[0]="[Info]: Complete with no errors."
  #exitCodeList[1]="Bash reserved: Catchall for general errors"
  #exitCodeList[2]="Bash reserved: Misuse of shell builtins"
  exitCodeList[3]="[Error]: $3"
  exitCodeList[4]="[Error]: Unknown option: '${3}' (use -h for help)"
  exitCodeList[5]="[Error]: Dependency not installed: '$3'"
  exitCodeList[6]="[Error]: JSON not valid: '$3'"

  # check if exit code is an error then send a notification
  if [[ $1 -eq 3 || $1 -eq 4 || $1 -eq 5 || $1 -eq 6 ]]; then
    warnNotification=2
  fi

  # loops the exit code list
  for i in "${!exitCodeList[@]}"; do
    if [[ "$1" == "$i" ]]; then
      # checks if verbose flag is active, if so echo the error description
      if [[ "$2" == "1" ]]; then
        echo ${BOLD}${exitCodeList[${i}]}${RESTORE}
      fi
      # calculates script runtime
      local startTime=$(date --date "${PROGSTARTTIME}" -u +%s)
      local endTime=$(date --utc +%s)
      local elapsedTime=$(($endTime-$startTime))

      if [[ ${warnNotification} -eq 1 ]]; then
        notify-send -t 2000 "$PROGNAME" "Complete but with warnings, check log for more info."
      elif [[ ${warnNotification} -eq 2 ]]; then
        notify-send -t 2000 "$PROGNAME" "Error! Check log for more info."
      else
        notify-send -t 2000 "$PROGNAME" "Complete."
      fi

      # logs description and type of exit code
      logMe 3 "${exitCodeList[${i}]} [${i}]"
      logMe "End at $(date +"%Y/%m/%d %H:%M:%S"). Runtime: ${elapsedTime}s."
      # exists with the error code 'i'
      exit $i
    fi
  done
}

# log function
# logs simple text to log file PROGLOG
# logMe type_of_log_msg msg outputs_to_screen
#   type_of_log_msg
#     0 : Info
#     1 : Error
#     2 : Warning
#     3 : Freehand
#   msg
#     text
#   outputs_to_screen
#     1 : if on, outputs text to the screen
logMe() {
  # if no argument is given, then log to file a info text
  if [[ $# -eq 1 ]]; then
    if [[ "$LOGTOFILE" == 1 ]]; then echo -e "[Info]: $*" >> ${PROGLOG} ; fi
  fi

  # log type : info
  if [[ "$1" == "0" ]]; then
    if [[ "$LOGTOFILE" == 1 ]]; then echo -e "[Info]: $2" >> ${PROGLOG} ; fi
    if [[ "$3" == "1" ]]; then echo -e "${BLUE}${BOLD}::${RESTORE} $2" ; fi
  fi

  # log type : error
  if [[ "$1" == "1" ]]; then
    if [[ "$LOGTOFILE" == 1 ]]; then echo -e "[ERROR]: $2" >> ${PROGLOG} ; fi
    if [[ "$3" == "1" ]]; then echo -e "${RED}${BOLD}::${RESTORE} $2" ; fi
    notify-send -t 2000 "$PROGNAME" "Error! Check log for more info."
  fi

  # log type : warning
  if [[ "$1" == "2" ]]; then
    if [[ "$LOGTOFILE" == 1 ]]; then echo -e "[Warning]: $2" >> ${PROGLOG} ; fi
    if [[ "$3" == "1" ]]; then echo -e "${YELLOW}${BOLD}::${RESTORE} $2" ; fi
    warnNotification=1

  fi

  # log type : freehand
  if [[ "$1" == "3" ]]; then
    if [[ "$LOGTOFILE" == 1 ]]; then echo -e "$2" >> ${PROGLOG} ; fi
    if [[ "$3" == "1" ]]; then echo -e "$2" ; fi
  fi
}

# check if dependencies are met
checkDependencies() {
  dependencies=("sudo" "jq" "git" "glibc")
  for pkg in ${dependencies[@]}; do
    checkDependency=$(pacman -Q $pkg 2>&1)
    exitStatus=$?
    if [ "$exitStatus" -eq 1 ]; then
      logMe 1 "Dependency not installed: '${pkg}'"
      exitCode 5 1 "${pkg}"
    fi
  done
}

#loops the argument string until is done
while [[ $# -gt 0 ]]; do
  key="$1"
  case "$key" in
    -h|--help) printHelp=1 ;;
    *) exitCode 4 1 "${key}" ;;
  esac
  shift
done

# checks if JSON files is valid
# empty files will NOT error out
verifyJSON() {
  if jq empty "$1" 2>/dev/null; then
    return 0
  else
    return 1
  fi
}

pauseError() {
  read -p "${RED}::${RESTORE} $*"
}

loadProfile() {
  clear
  printf "\e[1m.:: Profiles avaiable ::.\e[0m\n"
  printf "\n"

  local avaiableProfiles
  #printf "%-16s %-4s %-16s\n" "[name]" " " "[status]"
  for profilePath in $PROGDIR/profiles/*
  do
    if verifyJSON $profilePath ; then
      #printf "%-16s %-4s \e[32m%-16s\e[0m\n" "$(basename $profile)" "-->" "OK"
      avaiableProfiles=("${avaiableProfiles[@]}" "$profilePath")
      #echo "${GREEN}-->${RESTORE} $(basename $currentThemeDir)"
    #else
      #printf "%-16s %-4s \e[31m%-16s\e[0m\n" "$(basename $profile)" "-->" "Invalid JSON"
      #echo "${RED}--> Invalid JSON:${RESTORE} $(basename $currentThemeDir)"
    fi
  done

  # prints avaiable and verified profiles
  printf "\e[1m%-2s %-2s %-16s %-16s\e[0m\n" "[#]" "" "Profile Name"
  for ((i = 0 ; i < ${#avaiableProfiles[@]} ; i++)); do
    local cprofile=${avaiableProfiles[$i]}
    printf "%-2s %-2s %-16s %-16s\n" "[$i]" "->" "$(basename ${cprofile})"
  done
  printf "\n"
  read -p "Select your profile [#]: " nprofile
  profile=${avaiableProfiles[$nprofile]}

  # load JSON into var
  local profileJSON=$(cat $profile)

  # load jq values into vars
  # di = diskinfo
  di_bootSize=$( echo $profileJSON | jq --raw-output '.diskinfo["boot-size"]' )
  di_swapSize=$( echo $profileJSON | jq --raw-output '.diskinfo["swap-size"]' )
  di_grubUEFIName=$( echo $profileJSON | jq --raw-output '.diskinfo["grub-uefi-name"]' )
  # si = systeminfo
  si_hostName=$( echo $profileJSON | jq --raw-output '.systeminfo["hostname"]' )
  si_keymap=$( echo $profileJSON | jq --raw-output '.systeminfo["keymap"]' )
  si_locale=$( echo $profileJSON | jq --raw-output '.systeminfo["locale"]' )
  si_timezone=$( echo $profileJSON | jq --raw-output '.systeminfo["timezone"]' )
  # ui = userinfo
  ui_username=$( echo $profileJSON | jq --raw-output '.userinfo["username"]' )
  ui_userpass=$( echo $profileJSON | jq --raw-output '.userinfo["userpass"]' )
  ui_rootpass=$( echo $profileJSON | jq --raw-output '.userinfo["rootpass"]' )

  # pkg = packages
  local pkg_baseArray=$( echo $profileJSON | jq --raw-output '.["basepkgs"][]' )
  for pkg in ${pkg_baseArray[@]}; do
    #pkg_base=("${pkg_base[@]}" "$pkg")
    pkg_list=("${pkg_list[@]}" "$pkg")
  done

  local pkg_xArray=$( echo $profileJSON | jq --raw-output '.["xpkgs"][]' )
  for pkg in ${pkg_xArray[@]}; do
    #pkg_x=("${pkg_x[@]}" "$pkg")
    pkg_list=("${pkg_list[@]}" "$pkg")
  done

  local pkg_gpuArray=$( echo $profileJSON | jq --raw-output '.["gpupkgs"][]' )
  for pkg in ${pkg_gpuArray[@]}; do
    #pkg_gpu=("${pkg_gpu[@]}" "$pkg")
    pkg_list=("${pkg_list[@]}" "$pkg")
  done

  local pkg_basePlusArray=$( echo $profileJSON | jq --raw-output '.["basepluspkgs"][]' )
  for pkg in ${pkg_basePlusArray[@]}; do
    #pkg_basePlus=("${pkg_basePlus[@]}" "$pkg")
    pkg_list=("${pkg_list[@]}" "$pkg")
  done

  # services to be enabled
  local pkg_servicesArray=$( echo $profileJSON | jq --raw-output '.["systemdservices"][]' )
  for srv in ${pkg_servicesArray[@]}; do
    pkg_services=("${pkg_services[@]}" "$srv")
  done


  read -p "Profile selected: '$(basename ${profile})'"
  logMe 0 "Profile used: '$(basename ${profile})'"

}

review() {
  clear
  # column 1 and 2 size
  local c1=22
  local c2=16

  printf "\e[1m.:: Review Menu ::.\e[0m\n"
  printf "\n"
  logMe 0 "Review Menu"
  if [[ "$profile" ]]; then
    printf "Profile selected: '$(basename $profile)'\n"
  else
    printf "Profile selected: 'none'\n"
  fi
  printf "\n"
  printf "\e[1mDisk info\e[0m\n"
  printf "%-${c1}s %-2s %-${c1}s\n" "Boot partition size" ":" "$di_bootSize"
  printf "%-${c1}s %-2s %-${c2}s\n" "Swap partition size" ":" "$di_swapSize"
  if [[ "${di_installDisk}" ]]; then
    printf "Partition table. Type: $di_partType\n"
    printf " ${di_installDisk}1 - /boot with $di_bootSize\n"
    printf " ${di_installDisk}2 - /swap with $di_swapSize\n"
    printf " ${di_installDisk}3 - /root with the remaining space\n"
    if [[ "$di_partType" = "GPT" ]]; then
      printf "%-${c1}s %-2s %-${c2}s\n" "grub UEFI name entry" ":" "$di_grubUEFIName"
    fi
  fi
  printf "\n"

  printf "\e[1mSystem info\e[0m\n"
  printf "%-${c1}s %-2s %-${c2}s\n" "Hostname" ":" "$si_hostName"
  printf "%-${c1}s %-2s %-${c2}s\n" "Keymap" ":" "$si_keymap"
  printf "%-${c1}s %-2s %-${c2}s\n" "Locale" ":" "$si_locale"
  printf "%-${c1}s %-2s %-${c2}s\n" "Time zone" ":" "$si_timezone"
  printf "\n"

  printf "\e[1mUser info\e[0m\n"
  printf "%-${c1}s %-2s %-${c2}s\n" "Username" ":" "$ui_username"
  printf "%-${c1}s %-2s %-${c2}s\n" "User password" ":" "$ui_userpass"
  printf "%-${c1}s %-2s %-${c2}s\n" "Root password" ":" "$ui_rootpass"
  printf "\n"

  #TODO: change to a better output, maybe 2,3 pkg per line
  # column 1 and 2 size
  #local c1=6
  #local c2=16
  #printf "\e[1mBase packages\e[0m\n"
  #echo "${pkg_base[@]}"
  printf "\e[1mPackage list\e[0m\n"
  echo "${pkg_list[@]}"
#  printf "\e[1m%-${c1}s %-${c2}s\e[0m\n" "[#]" "package"
#   for ((i = 0 ; i < ${#pkg_base[@]} ; i++)); do
#     local pkg=${pkg_base[$i]}
#     printf "%-${c1}s %-${c2}s\n" "[$i]" "${pkg}"
#   done
  printf "\n"


  for srv in ${pkg_services[@]}; do
    echo "arch-chroot /mnt systemctl enable ${srv}"
  done


  read -p "Press enter to continue..."

}

diskMenu() {
  while true; do
  clear
  printf "\e[1m .:: Disk menu ::.\e[0m\n"
  printf "\e[1mCurrently manual partition is not avaiable.\e[0m\n"
  select diskmenu in 'Review' 'MBR' 'GPT' 'Back'
    do
      case $REPLY in
        1) dmReview ;;
        2) dmMBR ;;
        3) dmGPT ;;
        4) break 2 ;;
        *) echo 'Please select an option.' >&2
      esac
      break
    done
  done
}

dmReview() {
  clear
  printf "\e[1m.:: Disk review ::.\e[0m\n"
  printf "\n"

  # column 1 and 2 size
  local c1=22
  local c2=16

  printf "%-${c1}s %-2s %-${c1}s\n" "Boot partition size" ":" "$di_bootSize"
  printf "%-${c1}s %-2s %-${c2}s\n" "Swap partition size" ":" "$di_swapSize"
  if [[ "${di_installDisk}" ]]; then
    printf "Partition table. Type: $di_partType\n"
    printf " ${di_installDisk}1 - /boot with $di_bootSize\n"
    printf " ${di_installDisk}2 - /swap with $di_swapSize\n"
    printf " ${di_installDisk}3 - /root with the remaining space\n"
    if [[ "$di_partType" = "GPT" ]]; then
      printf "%-${c1}s %-2s %-${c2}s\n" "grub UEFI name entry" ":" "$di_grubUEFIName"
    fi
  fi
  printf "\n"
  printf "Current partition layout, doesnt account for the new changes!\n"
  lsblk -f
  printf "\n"
  read -p "Press enter to continue..."

}

dmMBR() {
  clear
  printf "\e[1m.:: Disk - Install as MBR ::.\e[0m\n"
  printf "\n"
  printf "Running 'lsblk -f'\n"
  lsblk -f
  printf "\n"
  read -p "Type destination disk (Please enter full path ie /dev/vda): " di_installDisk
  printf "\n"
  printf "\e[1m* * * Beware! All partitions will be primary! * * *\e[0m\n"
  printf "\n"
  printf "\e[1m$di_installDisk\e[0m set to install destination.\n"
  printf "Partition table:\n"
  printf " ${di_installDisk}1 - /boot with $di_bootSize\n"
  printf " ${di_installDisk}2 - /swap with $di_swapSize\n"
  printf " ${di_installDisk}3 - /root with the remaining space\n"
  #read -p "Press enter to continue. Ctrl+C to cancel."

  di_bootPart=${di_installDisk}1
  di_swapPart=${di_installDisk}2
  di_rootPart=${di_installDisk}3

  di_partType="MBR"

  printf "\n"
  read -p "Press enter to continue..."
}

dmGPT() {
  clear
  printf "\e[1m.:: Disk - Install as GPT ::.\e[0m\n"
  printf "\n"
  printf "Running 'lsblk -f'\n"
  lsblk -f
  printf "\n"
  read -p "Type destination disk (Please enter full path ie /dev/vda): " di_installDisk
  printf "\n"
  printf "\e[1m$di_installDisk\e[0m set to install destination.\n"
  printf "Partition table:\n"
  printf " ${di_installDisk}1 - /boot with $di_bootSize\n"
  printf " ${di_installDisk}2 - /swap with $di_swapSize\n"
  printf " ${di_installDisk}3 - /root with the remaining space\n"
  #read -p "Press enter to continue. Ctrl+C to cancel."

  di_bootPart=${di_installDisk}1
  di_swapPart=${di_installDisk}2
  di_rootPart=${di_installDisk}3

  di_partType="GPT"

  printf "\n"
  read -p "Press enter to continue..."
}

install() {
  review
  local awsr=""
  while true; do
    read -p "Install arch with the above configuration? (y/n) " yn
    printf "\n"
    case $yn in
      [Yy]* ) installOK ; break ;;
      [Nn]* ) break ;;
      * ) printf "Please use [y]es or [n]o\n";;
    esac
  done
}

enableServices() {

 # TODO: check if array is empty
  for srv in ${pkg_services[@]}; do
    arch-chroot /mnt systemctl enable ${srv}
  done

}

installOK() {

  printf Formating $di_installDisk"\n"
  if [[ "$di_partType" == "MBR" ]]; then
    (
      echo o # Create a new empty DOS partition table
      echo n # Add /boot partition
      echo p # Primary partition
      echo 1 # Partition number
      echo   # First sector default
      echo +$di_bootSize  # Size
      echo n # Add /swap partition
      echo p # Primary partition
      echo 2 # Partition number
      echo   # First sector default
      echo +$di_swapSize  # Size
      echo n # Add /root partition
      echo p # Primary partition
      echo 3 # Partition number
      echo   # First sector default
      echo   # Size remaining
      echo w # Write changes
    ) | fdisk $di_installDisk
    printf "\n"

    # formating partitions
    printf "Making filesystem\n"
    mkfs.ext4 "${di_installDisk}1"
    mkswap "${di_installDisk}2"
    mkfs.ext4 "${di_installDisk}3"

    # mounting partitions
    printf "Mounting partitions\n"
    mount "${di_installDisk}3" /mnt
    mkdir /mnt/{boot,home}
    mount "${di_installDisk}1" /mnt/boot
    swapon "${di_installDisk}2"
  fi
  printf "\n"

  if [[ "$di_partType" == "GPT" ]]; then
    (
      echo g # Create a new empty GPT partition table
      echo n # Add /boot partition
      echo 1 # Partition number
      echo   # First sector default
      echo +$di_bootSize  # Size
      echo n # Add /swap partition
      echo 2 # Partition number
      echo   # First sector default
      echo +$di_swapSize  # Size
      echo n # Add /root partition
      echo 3 # Partition number
      echo   # First sector default
      echo   # Size remaining
      echo w # Write changes
    ) | fdisk $di_installDisk
    printf "\n"

    # formating partitions
    printf "Making filesystem\n"
    pacman -S dosfstools --noconfirm
    mkfs.fat -F32 "${di_installDisk}1"
    mkswap "${di_installDisk}2"
    mkfs.ext4 "${di_installDisk}3"

    # mounting partitions
    printf "Mounting partitions\n"
    mount "${di_installDisk}3" /mnt
    mkdir /mnt/{boot,home}
    mkdir /mnt/boot/efi
    mount "${di_installDisk}1" /mnt/boot/efi
    swapon "${di_installDisk}2"
  fi

  printf "\n"

  # add multilib for liveiso
  sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf
  pacman -Sy
  printf "\n"

  # pacstrap new packages
  printf "Installing packages\n"
  pacstrap /mnt ${pkg_list[@]}
  printf "\n"

  # fstab gen
  printf "Generating fstab\n"
  genfstab -U /mnt >> /mnt/etc/fstab
  printf "\n"

  # setting timezone
  printf "Setting Timezone\n"
  arch-chroot /mnt timedatectl set-timezone $si_timezone
  printf "\n"

  # generate /etc/adjtime
  printf "Generate /etc/adjtime\n"
  arch-chroot /mnt hwclock --systohc
  printf "\n"

  # select locale
  printf "Selecting locale $si_locale\n"
  arch-chroot /mnt sed -i "s/#${si_locale}/${si_locale}/" /etc/locale.gen
  arch-chroot /mnt locale-gen
  printf "\n"

  # create locale.conf
  printf "Creating locale.conf\n"
  echo "LANG=$si_locale" >> /mnt/etc/locale.conf
  printf "\n"

  # setting keyboard layout
  printf "Setting keyboard layout\n"
  echo "KEYMAP=$si_keymap" >> /mnt/etc/vconsole.conf
  printf "\n"

  # setting hostname
  printf "Setting host name\n"
  echo "$si_hostName" >> /mnt/etc/hostname
  printf "\n"

  # setting hosts file
  printf "Setting hosts file\n"
  echo -e "127.0.0.1	localhost\n::1		localhost\n127.0.1.1	$si_hostName.localdomain	$si_hostName" >> /mnt/etc/hosts
  printf "\n"

  # enable networkmanager service
  printf "Enable networkmanager service\n"
  arch-chroot /mnt systemctl enable NetworkManager.service
  printf "\n"

  # recreate initramfs
  printf "Recreate initramfs\n"
  arch-chroot /mnt mkinitcpio -P
  printf "\n"

  #grub install
  printf "GRUB Install\n"
  if [[ "$di_partType" == "MBR" ]]; then
    arch-chroot /mnt grub-install --target=i386-pc $di_installDisk
  fi

  if [[ "$di_partType" == "GPT" ]]; then
    arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=$di_grubUEFIName
  fi
  printf "\n"

  # generate main config file for grub
  printf "Generate main config file for grub\n"
  arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
  printf "\n"

  # set root password
  printf "Set root password\n"
  echo "root:$ui_rootpass" | arch-chroot /mnt chpasswd
  printf "\n"

  #TODO: not working, user still not on wheel group
  # config visudo
  printf "Visudo configuration\n"
  #arch-chroot /mnt sed -i '/^# %wheel ALL=(ALL) ALL/s/^# //' /etc/sudoers
  arch-chroot /mnt sed --in-place '/# %wheel ALL=(ALL) ALL/c%wheel ALL=(ALL) ALL' /etc/sudoers

  printf "\n"

  # Create a new user and add it to the wheel group.
  printf "Creating $ui_username profile\n"
  arch-chroot /mnt useradd -m -G wheel $ui_username

  # creates a new password for new user
  echo "$ui_username:$ui_userpass" | arch-chroot /mnt chpasswd
  printf "\n"

  # Basic pacman configuration
  printf "Pacman configuration\n"
  #arch-chroot /mnt sed -i "s/#VerbosePkgLists/VerbosePkgLists/" /etc/pacman.conf
  #arch-chroot /mnt sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf
  cat <<PACMAN > /mnt/etc/pacman.conf
#
# /etc/pacman.conf
#
# See the pacman.conf(5) manpage for option and repository directives

#
# GENERAL OPTIONS
#
[options]
# The following paths are commented out with their default values listed.
# If you wish to use different paths, uncomment and update the paths.
#RootDir     = /
#DBPath      = /var/lib/pacman/
#CacheDir    = /var/cache/pacman/pkg/
#LogFile     = /var/log/pacman.log
#GPGDir      = /etc/pacman.d/gnupg/
#HookDir     = /etc/pacman.d/hooks/
HoldPkg     = pacman glibc
#XferCommand = /usr/bin/curl -L -C - -f -o %o %u
#XferCommand = /usr/bin/wget --passive-ftp -c -O %o %u
#CleanMethod = KeepInstalled
Architecture = auto

# Pacman won't upgrade packages listed in IgnorePkg and members of IgnoreGroup
#IgnorePkg   =
#IgnoreGroup =

#NoUpgrade   =
#NoExtract   =

# Misc options
#UseSyslog
Color
#TotalDownload
CheckSpace
VerbosePkgLists
ILoveCandy
ParallelDownloads = 5

# By default, pacman accepts packages signed by keys that its local keyring
# trusts (see pacman-key and its man page), as well as unsigned packages.
SigLevel    = Required DatabaseOptional
LocalFileSigLevel = Optional
#RemoteFileSigLevel = Required

# NOTE: You must run `pacman-key --init` before first using pacman; the local
# keyring can then be populated with the keys of all official Arch Linux
# packagers with `pacman-key --populate archlinux`.

#
# REPOSITORIES
#   - can be defined here or included from another file
#   - pacman will search repositories in the order defined here
#   - local/custom mirrors can be added here or in separate files
#   - repositories listed first will take precedence when packages
#     have identical names, regardless of version number
#   - URLs will have \$repo replaced by the name of the current repo
#   - URLs will have \$arch replaced by the name of the architecture
#
# Repository entries are of the format:
#       [repo-name]
#       Server = ServerName
#       Include = IncludePath
#
# The header [repo-name] is crucial - it must be present and
# uncommented to enable the repo.
#

# The testing repositories are disabled by default. To enable, uncomment the
# repo name header and Include lines. You can add preferred servers immediately
# after the header, and they will be used before the default mirrors.

#[testing]
#Include = /etc/pacman.d/mirrorlist

[core]
Include = /etc/pacman.d/mirrorlist

[extra]
Include = /etc/pacman.d/mirrorlist

#[community-testing]
#Include = /etc/pacman.d/mirrorlist

[community]
Include = /etc/pacman.d/mirrorlist

# If you want to run 32 bit applications on your x86_64 system,
# enable the multilib repositories as required here.

#[multilib-testing]
#Include = /etc/pacman.d/mirrorlist

[multilib]
Include = /etc/pacman.d/mirrorlist

# An example of a custom package repository.  See the pacman manpage for
# tips on creating your own repositories.
#[custom]
#SigLevel = Optional TrustAll
#Server = file:///home/custompkgs

# archi3 repo
[archi3-repo]
SigLevel = Optional TrustAll
Server = https://rtxx.github.io/\$repo/\$arch

PACMAN

  printf "\n"

  # enable services on the profile
  enableServices

  # copy /skel to new user and fix permissions after copying
  cp -rf /etc/skel/. /mnt/home/$ui_username/
  arch-chroot /mnt chown -R $ui_username:$ui_username /home/$ui_username/
  #arch-chroot /mnt find /home/$ui_username/ -type f -print0 | xargs -0 chmod 664
  #arch-chroot /mnt find /home/$ui_username/ -type d -print0 | xargs -0 chmod 775

  # copy lightdm config
  cp -f /etc/lightdm/* /mnt/etc/lightdm

  # config /etc/environment
  echo "TERMINAL=kitty" >> /mnt/etc/environment
  echo "QT_QPA_PLATFORMTHEME=qt5ct" >> /mnt/etc/environment

  read -p "Install done!. Press enter to continue..."
}

main() {

  # log start of the script
  logMe "Start at $(date --date "${PROGSTARTTIME}" +"%Y/%m/%d %H:%M:%S")"
  #logMe 0 "${PROGNAME} started"

  # check if all dependencies necessary are installed
  checkDependencies

  # if help flag is true
  if [ "$printHelp" ]; then
    printHelp
    exitCode 0
  fi

  # export vars
  export profile=""
  export di_bootSize=""
  export si_hostName=""
  # di = diskinfo
  export di_bootSize=""
  export di_swapSize=""
  export di_grubUEFIName=""

  export di_bootPart=""
  export di_swapPart=""
  export di_rootPart=""
  export di_partType=""

  # si = systeminfo
  export si_hostName=""
  export si_keymap=""
  export si_locale=""
  export si_timezone=""
  # ui = userinfo
  export ui_username=""
  export ui_userpass=""
  export ui_rootpass=""
  # pkg = packages
  export pkg_base=""
  export pkg_list=""
  export pkg_services=""


  while true; do
  clear
  printf "\e[1m.:: Arch minimal install ::.\e[0m\n"
  select mainMenu in 'Load profile' 'Disk Menu' 'Review' 'Install' 'Quit'
    do
      case $REPLY in
        1) loadProfile ;;
        2) diskMenu ;;
        3) review ;;
        4) install ;;
        5) break 2 ;;
        *) pauseError 'Unknown option: '$REPLY''
      esac
      break
    done
  done

  # if script reachs here, then it went without any errors, nice.
  logMe 0 "Complete." 1
  exitCode 0

}

# run main function
main
