#!/bin/bash
# Simple arch install script
# REQUIREMENTS
# 1- Internet connection
# 2 - git glibc

#set -x # echo on
#export DISK=/dev/vda
#export PARTITION_BOOT=/dev/vda1
#export PARTITION_ROOT=/dev/vda3
#export PARTITION_SWAP=/dev/vda2
#export GRUB_MBR_LOCATION=/dev/vda

export GRUB_UEFI_NAME=archlinux

export HOST_NAME=archx64
export KEYMAP=pt-latin1
export LOCALE=en_US.UTF-8

export USER_NAME=vuser

PACSTRAP_PKG_LIST_BASE="base linux linux-firmware nano networkmanager grub efibootmgr os-prober sudo bash-completion"
PACSTRAP_PKG_LIST_X="xorg-server xorg-xinit xorg-setxkbmap"
PACSTRAP_PKG_LIST_I3="i3-gaps i3status i3lock python-i3ipc dmenu noto-fonts ttf-fantasque-sans-mono xterm htop nethogs arandr volumeicon dunst feh picom udiskie unclutter xorg-xinput xfce4-power-manager tlp cpupower polkit polkit-gnome polkit-qt5 networkmanager breeze breeze-gtk qt5ct lxappearance capitaine-cursors arc-icon-theme archlinux-wallpaper thunar mousepad firefox neofetch scrot xdg-user-dirs lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings git gvfs powertop pulseaudio pulseaudio-alsa alsa-utils pavucontrol  ufw gufw gnome-keyring seahorse nano-syntax-highlighting"

echo "arch minimal script install"

#if [ -z "${PARTITION_BOOT}" ] || [ -z "${PARTITION_ROOT}" ] || [ -z "${PARTITION_SWAP}" ] ||  [ -z "${GRUB_MBR_LOCATION}" ] || [ -z "${GRUB_UEFI_NAME}" ];
#then
#echo "Please config script first."
#exit
#fi

if ping -q -w 1 -c 1 www.sapo.pt > /dev/null; then
	lsblk -f
	echo "Please enter disk:"
	read -p "Disk to use: " DISK
	echo
	
	echo "Select partition table type "
	echo "MBR and GPT auto install will use all disk and format everything, careful! "
	options=("MBR - Auto Install" "GPT - Auto Install" "MBR" "GPT" "Abort")
	select opt in "${options[@]}"
	do
		case $opt in
		    "MBR - Auto Install")
		    	echo "MBR - Auto Installation"
			echo "* * * Beware all partitions will be primary! * * *"
			echo "Partition table:"
			echo " ${DISK}1 - /boot with 512MB"
			echo " ${DISK}2 - /swap with 4GB"
			echo " ${DISK}3 - /root with the remaining space"
			read -p "Press enter to continue. Ctrl+C to cancel."
			(
			echo o # Create a new empty DOS partition table
			echo n # Add /boot partition
			echo p # Primary partition
			echo 1 # Partition number
			echo   # First sector default
			echo +512MB  # Size
			echo n # Add /swap partition
			echo p # Primary partition
			echo 2 # Partition number
			echo   # First sector default
			echo +4GB  # Size
			echo n # Add /root partition
			echo p # Primary partition
			echo 3 # Partition number
			echo   # First sector default
			echo   # Size remaining
			echo w # Write changes
			) | fdisk $DISK
			
			# formating partitions
			mkfs.ext4 "${DISK}1"
			mkswap "${DISK}2"
			mkfs.ext4 "${DISK}3"
			
			# mounting partitions
			echo "Mounting partitions"
			mount "${DISK}3" /mnt
			mkdir /mnt/{boot,home}
			mount "${DISK}1" /mnt/boot
			swapon "${DISK}2"
			
			export $PARTITION_TABLE_TYPE="MBR"
			
		        break
		        ;;
		    "GPT - Auto Install")
			echo "GPT - Auto Installation"
			echo "Partition table:"
			echo " ${DISK}1 - /boot with 512MB"
			echo " ${DISK}2 - /swap with 4GB"
			echo " ${DISK}3 - /root with the remaining space"
			read -p "Press enter to continue. Ctrl+C to cancel."
			(
			echo g # Create a new empty GPT partition table
			echo n # Add /boot partition
			echo 1 # Partition number
			echo   # First sector default
			echo +512MB  # Size
			echo n # Add /swap partition
			echo 2 # Partition number
			echo   # First sector default
			echo +4GB  # Size
			echo n # Add /root partition
			echo 3 # Partition number
			echo   # First sector default
			echo   # Size remaining
			echo w # Write changes
			) | fdisk $DISK
			
			# formating partitions
			pacman -S dosfstools --noconfirm
			mkfs.fat -F32 "${DISK}1"
			mkswap "${DISK}2"
			mkfs.ext4 "${DISK}3"
			
			# mounting partitions
			echo "Mounting partitions"
			mount "${DISK}3" /mnt
			mkdir /mnt/{boot,home}
			mount "${DISK}1" /mnt/boot/efi
			swapon "${DISK}2"
			
			export $PARTITION_TABLE_TYPE="GPT"
			
		        break
		        ;;
		    "MBR - Manual Install")    		
		        break
		        ;;
		    "Abort")
			echo "Aborting..."
		        exit
		        ;;
		    *) echo "invalid option $REPLY";;
		esac
	done
	echo
	
	#test
	#exit
	# add multilib for liveiso
	sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf
	
	# pacstrap new packages
	echo "Installing packages with pacstrap"
	pacstrap /mnt $PACSTRAP_PKG_LIST_BASE
	echo
		
	echo "CPU microde installation"
	options=("Intel" "AMD" "Dont install" "Abort")
	select opt in "${options[@]}"
	do
		case $opt in
		    "Intel")
		        pacstrap /mnt intel-ucode
		        break
		        ;;
		    "AMD")
		        pacstrap /mnt amd-ucode
		        break
		        ;;
		    "Dont install")
		        break
		        ;;
		    "Abort")
			echo "Aborting..."
		        exit
		        ;;
		    *) echo "invalid option $REPLY";;
		esac
	done
	echo
	
	# fstab gen
	echo "Generating fstab"
	genfstab -U /mnt >> /mnt/etc/fstab
	echo
		
	# chroot into the new system
	#echo "chroot into the new system"
	#arch-chroot /mnt
	#echo
	
	# setting timezone
	echo "Setting Timezone"
	arch-chroot /mnt timedatectl set-timezone Europe/Lisbon
	echo
	
	# generate /etc/adjtime
	echo "Generate /etc/adjtime"
	arch-chroot /mnt hwclock --systohc
	echo
		
	# select locale
	echo "Selecting locale $LOCALE"
	#nano /etc/locale.gen
	arch-chroot /mnt sed -i "s/#$LOCALE/$LOCALE/" /etc/locale.gen
	arch-chroot /mnt locale-gen
	#echo
	
	# create locale.conf
	echo "Creating locale.conf"
	#arch-chroot /mnt echo "LANG=$LOCALE" >> /etc/locale.conf
	echo "LANG=$LOCALE" >> /mnt/etc/locale.conf
	echo
	
	# setting keyboard layout 
	echo "Setting keyboard layout"
	#arch-chroot /mnt echo "KEYMAP=$KEYMAP" >> /etc/vconsole.conf
	echo "KEYMAP=$KEYMAP" >> /mnt/etc/vconsole.conf
	echo
	
	# setting hostname 
	echo "Setting host name"
	#arch-chroot /mnt echo "$HOST_NAME" >> /etc/hostname
	echo "$HOST_NAME" >> /mnt/etc/hostname
	echo
	
	# setting hosts file 
	echo "Setting hosts file"
	#arch-chroot /mnt echo -e "127.0.0.1 localhost\n::1 localhost\n127.0.1.1 $HOST_NAME.localdomain $HOST_NAME" >> /etc/hosts
	echo -e "127.0.0.1	localhost\n::1		localhost\n127.0.1.1	$HOST_NAME.localdomain	$HOST_NAME" >> /mnt/etc/hosts
	#echo
	
	# enable networkmanager service 
	echo "Enable networkmanager service"
	arch-chroot /mnt systemctl enable NetworkManager.service
	echo	
	
	# recreate initramfs 
	echo "Recreate initramfs"
	arch-chroot /mnt mkinitcpio -P
	echo
	
	echo "GRUB Install:"
	echo "Reminder: Partition table type is $PARTITION_TABLE_TYPE"
	options=("MBR" "UEFI" "Dont install" "Abort")
	select opt in "${options[@]}"
	do
		case $opt in
		    "MBR")
		        arch-chroot /mnt grub-install --target=i386-pc $DISK
		        break
		        ;;
		    "UEFI")
		        arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/mnt/boot --bootloader-id=$GRUB_UEFI_NAME
		        break
		        ;;
		    "Dont install")
		        break
		        ;;
		    "Abort")
			echo "Aborting..."
		        exit
		        ;;
		    *) echo "invalid option $REPLY";;
		esac
	done
	echo
	
	# generate main config file for grub
	echo "Generate main config file for grub"
	arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
	echo
	
	# set root password
	echo "Set root password"
	arch-chroot /mnt passwd
	echo
	
	# config visudo
	echo "Visudo configuration"
	arch-chroot /mnt  sed -i '/^# %wheel ALL=(ALL) ALL/s/^# //' /etc/sudoers
	echo
	
	# Create a new user and add it to the wheel group and force user to change password at next login.
	echo "Creating $USER_NAME profile "
	arch-chroot /mnt useradd -m -G wheel $USER_NAME
	echo "Please enter $USER_NAME password "
	arch-chroot /mnt passwd $USER_NAME
	#arch-chroot /mnt passwd -e $USER_NAME
	echo
	
	# Basic pacman configuration
	echo "Pacman configuration and enabling multilib repo"
	arch-chroot /mnt sed -i "s/#VerbosePkgLists/VerbosePkgLists/" /etc/pacman.conf
	arch-chroot /mnt sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf
	echo
	
	echo "Install X Server?"
	read -p "Continue? " -n 1 -r
	echo
	if [[ $REPLY =~ ^[Yy]$ ]]
	then
		# X install
		echo "X Install"
		pacstrap /mnt $PACSTRAP_PKG_LIST_X
		
		# graphics drivers 
		echo "Graphic Drivers Installation"
		echo "Warning! Here be dragons! Very little testing was done!"
		options=("Intel" "AMD" "NVIDIA" "Dont install" "Abort")
		select opt in "${options[@]}"
		do
			case $opt in
			    "Intel")
				pacstrap /mnt xf86-video-intel mesa lib32-mesa
				break
				;;
			    "AMD")
				pacstrap /mnt xf86-video-amdgpu mesa lib32-mesa
				break
				;;
			    "NVIDIA")
				pacstrap /mnt nvidia nvidia-utils lib32-nvidia-utils mesa lib32-mesa
				break
				;;
			    "Nouveau NVIDIA")
				pacstrap /mnt xf86-video-nouveau mesa lib32-mesa
				break
				;;
			    "Dont install")
				break
				;;
			    "Abort")
				echo "Aborting..."
				exit
				;;
			    *) echo "invalid option $REPLY";;
			esac
		done
		
		#DE Installation
		echo "Desktop Environment Installation"
		echo "Warning! Here be dragons! Very little testing was done!"
		options=("GNOME" "KDE" "XFCE" "i3" "i3 - My Configs" "Dont install" "Abort")
		select opt in "${options[@]}"
		do
			case $opt in
			    "GNOME")
				pacstrap /mnt gnome
				arch-chroot /mnt systemctl enable gdm
				break
				;;
			    "KDE")
				pacstrap /mnt plasma-desktop dolphin konsole firefox sddm
				arch-chroot /mnt systemctl enable sddm
				break
				;;
			    "XFCE")
				pacstrap /mnt xfce4 xfce4-goodies lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings
				arch-chroot /mnt systemctl enable lightdm
				break
				;;
			    "i3")
				pacstrap /mnt i3 i3status i3lock dmenu xterm lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings
				arch-chroot /mnt systemctl enable lightdm
				break
				;;
			    "i3gaps - My Configs")
				pacstrap /mnt $PACSTRAP_PKG_LIST_I3
				arch-chroot /mnt systemctl enable lightdm
				
				# creating common folders
				arch-chroot /mnt xdg-user-dirs-update
				
				#setting default terminal
				echo "TERMINAL=xterm" >> /mnt/etc/environment
				
				# nano configuration
				echo "include /usr/share/nano-syntax-highlighting/*.nanorc" >> /mnt/etc/nanorc
				echo "set mouse" >> /mnt/etc/nanorc
				
				# qt configuration
				echo "QT_QPA_PLATFORMTHEME=qt5ct" >> /mnt/etc/environment
				
				# enabling firewall
				arch-chroot /mnt systemctl enable ufw
				
				# TODO:  change this bit to a external file 
				# getting i3 with my dot files
				# creates a bash file that you must run when logging in
				echo "#!/bin/bash" >> configi3
				echo "if [ "$EUID" -ne 0 ]" >> configi3
				echo "	then echo "Please run as root"" >> configi3
				echo "  	exit" >> configi3
				echo "fi" >> configi3
				
				#get files from git
				echo "git clone http://github.com/rtxx/i3-config.git /tmp/i3" >> configi3 

				# fix git files permissions
				echo "chown -R $USER_NAME:$USER_NAME /tmp/i3" >> configi3
				echo "find /tmp/i3 -type f -print0 | xargs -0 chmod 664" >> configi3
				echo "find /tmp/i3 -type d -print0 | xargs -0 chmod 775" >> configi3
				
				# copy dot files
				echo "cp -rp /tmp/i3/. /home/$USER_NAME/" >> configi3
				echo "cp -r /tmp/i3/lightdm-gtk-greeter.conf /etc/lightdm/" >> configi3
				echo "chmod +x /home/$USER_NAME/.config/i3/scripts/*" >> configi3
				
				# deletes unwanted files
				echo "rm -rf /home/$USER_NAME/.git /home/$USER_NAME/LICENSE /home/$USER_NAME/README.md /home/$USER_NAME/breezeblack.kra /home/$USER_NAME/screenshot.png /home/$USER_NAME/screenshot2.png /home/$USER_NAME/vm-lighdm.png" >> configi3
				
				# creates/updates common folders
				echo "xdg-user-dirs-update" >> configi3
				
				# sets x keyboard layout
				echo "localectl set-x11-keymap pt" >> configi3
				echo "echo Please relog to apply settings." >> configi3
				
				# permission to execute
				chmod +x configi3
				
				# moves to home dir
				mv configi3 /mnt/home/$USER_NAME/
				echo "Please run sudo configi3 on 1st login with $USER_NAME account, located on home."
				
				echo
				break
				;;
			    "Dont install")
				break
				;;
			    "Abort")
				echo "Aborting..."
				exit
				;;
			    *) echo "invalid option $REPLY";;
			esac
		done
		
		echo		
	
	fi

	read -p "Instalation Done. Please reboot."
	exit
				
else
	echo "Please check internet connection."
fi


# Sources
# https://devhints.io/bash
# https://stackoverflow.com/questions/929368/how-to-test-an-internet-connection-with-bash
# https://stackoverflow.com/questions/1885525/how-do-i-prompt-a-user-for-confirmation-in-bash-script
# https://askubuntu.com/questions/1705/how-can-i-create-a-select-menu-in-a-shell-script
# https://serverfault.com/questions/7503/how-to-determine-if-a-bash-variable-is-empty
# https://github.com/honze-net/dalu/blob/main/example.sh
# https://github.com/jleclanche/dotfiles/blob/master/install-arch.sh
# https://stackoverflow.com/questions/34515193/sed-pacman-conf-remove-for-multilib-include
# https://stackoverflow.com/questions/18215973/how-to-check-if-running-as-root-in-a-bash-script
# https://superuser.com/questions/332252/how-to-create-and-format-a-partition-using-a-bash-script
