#!/bin/bash
# Simple arch install script
# REQUIREMENTS
# 1- Internet connection
# 2 - git

#set -x # echo on
export PARTITION_BOOT=/dev/vda1
export PARTITION_ROOT=/dev/vda3
export PARTITION_SWAP=/dev/vda2
export GRUB_MBR_LOCATION=/dev/vda
export GRUB_UEFI_NAME=archlinux

export HOST_NAME=archx64
export KEYMAP=pt-latin1
export LOCALE=en_US.UTF-8

export USER_NAME=vuser

PACSTRAP_PKG_LIST_BASE="base linux linux-firmware nano networkmanager grub efibootmgr os-prober sudo bash-completion"
PACSTRAP_PKG_LIST_X="xorg-server xorg-xinit xorg-setxkbmap"
PACSTRAP_PKG_LIST_I3="i3-gaps i3status i3lock python-i3ipc dmenu noto-fonts ttf-fantasque-sans-mono xterm htop nethogs arandr volumeicon dunst feh picom udiskie unclutter xorg-xinput xfce4-power-manager tlp cpupower polkit polkit-gnome polkit-qt5 networkmanager breeze breeze-gtk qt5ct lxappearance capitaine-cursors arc-icon-theme archlinux-wallpaper thunar mousepad firefox neofetch scrot xdg-user-dirs lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings git gvfs powertop pulseaudio pulseaudio-alsa alsa-utils pavucontrol  ufw gufw gnome-keyring seahorse nano-syntax-highlighting"

echo "arch minimal script install"

if [ -z "${PARTITION_BOOT}" ] || [ -z "${PARTITION_ROOT}" ] || [ -z "${PARTITION_SWAP}" ] ||  [ -z "${GRUB_MBR_LOCATION}" ] || [ -z "${GRUB_UEFI_NAME}" ];
then
echo "Please config script first."
exit
fi

if ping -q -w 1 -c 1 www.sapo.pt > /dev/null; then
	lsblk -f
	echo ""
	echo Formating $PARTITION_BOOT as boot
	echo Formating $PARTITION_SWAP as swap
	echo Formating $PARTITION_ROOT as root
	read -p "Continue? " -n 1 -r
	echo
	if [[ $REPLY =~ ^[Yy]$ ]]
	then
		mkfs.ext4 $PARTITION_BOOT
		mkswap $PARTITION_SWAP
		mkfs.ext4 $PARTITION_ROOT
	else
		echo "Aborting..."
		exit
	fi
	#read -p "Press Enter to continue."
	echo ""
		
	echo "Mounting partitions"
	mount $PARTITION_ROOT /mnt
	mkdir /mnt/{boot,home}
	mount $PARTITION_BOOT /mnt/boot
	swapon $PARTITION_SWAP
	#read -p "Press Enter to continue."
	echo ""
	
	# pacstrap new packages
	echo "Installing packages with pacstrap"
	pacstrap /mnt $PACSTRAP_PKG_LIST_BASE
	#read -p "Press Enter to continue."
	echo ""
		
	echo "Microde to install:"
	options=("Intel" "AMD" "Dont install" "Abort")
	select opt in "${options[@]}"
	do
		case $opt in
		    "Intel")
		        pacstrap /mnt intel-ucode
		        break
		        ;;
		    "AMD")
		        pacstrap /mnt amd-ucode
		        break
		        ;;
		    "Dont install")
		        break
		        ;;
		    "Abort")
		   		echo "Aborting..."
		        exit
		        ;;
		    *) echo "invalid option $REPLY";;
		esac
	done
	#read -p "Press Enter to continue."
	echo ""
	
	# fstab gen
	echo "Generating fstab"
	genfstab -U /mnt >> /mnt/etc/fstab
	#read -p "Press Enter to continue."
	echo ""
		
	# chroot into the new system
	#echo "chroot into the new system"
	#arch-chroot /mnt
	#read -p "Press Enter to continue."
	#echo ""
	
	# setting timezone
	echo "Setting Timezone"
	arch-chroot /mnt timedatectl set-timezone Europe/Lisbon
	#read -p "Press Enter to continue."
	echo ""
	
	# generate /etc/adjtime
	echo "Generate /etc/adjtime"
	arch-chroot /mnt hwclock --systohc
	#read -p "Press Enter to continue."
	echo ""
		
	# select locale
	echo "Select/Uncomment locale $LOCALE"
	#nano /etc/locale.gen
	arch-chroot /mnt sed -i "s/#$LOCALE/$LOCALE/" /etc/locale.gen
	arch-chroot /mnt locale-gen
	#read -p "Press Enter to continue."
	#echo ""
	
	# create locale.conf
	echo "Creating locale.conf"
	#arch-chroot /mnt echo "LANG=$LOCALE" >> /etc/locale.conf
	echo "LANG=$LOCALE" >> /mnt/etc/locale.conf
	#read -p "Press Enter to continue."
	echo ""
	
	# setting keyboard layout 
	echo "Setting keyboard layout"
	#arch-chroot /mnt echo "KEYMAP=$KEYMAP" >> /etc/vconsole.conf
	echo "KEYMAP=$KEYMAP" >> /mnt/etc/vconsole.conf
	#read -p "Press Enter to continue."
	echo ""
	
	# setting hostname 
	echo "Setting host name"
	#arch-chroot /mnt echo "$HOST_NAME" >> /etc/hostname
	echo "$HOST_NAME" >> /mnt/etc/hostname
	#read -p "Press Enter to continue."	
	echo ""
	
	# setting hosts file 
	echo "Setting hosts file"
	#arch-chroot /mnt echo -e "127.0.0.1 localhost\n::1 localhost\n127.0.1.1 $HOST_NAME.localdomain $HOST_NAME" >> /etc/hosts
	echo -e "127.0.0.1	localhost\n::1	localhost\n127.0.1.1	$HOST_NAME.localdomain	$HOST_NAME" >> /mnt/etc/hosts
	#read -p "Press Enter to continue."
	#echo ""
	
	# enable networkmanager service 
	echo "Enable networkmanager service"
	arch-chroot /mnt systemctl enable NetworkManager.service
	#read -p "Press Enter to continue."		
	echo ""		
	
	# recreate initramfs 
	echo "Recreate initramfs"
	arch-chroot /mnt mkinitcpio -P
	#read -p "Press Enter to continue."
	echo ""
	
	echo "GRUB Install:"
	options=("MBR" "UEFI" "Dont install" "Abort")
	select opt in "${options[@]}"
	do
		case $opt in
		    "MBR")
		        arch-chroot /mnt grub-install --target=i386-pc $GRUB_MBR_LOCATION
		        break
		        ;;
		    "UEFI")
		        arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/mnt/boot --bootloader-id=$GRUB_UEFI_NAME
		        break
		        ;;
		    "Dont install")
		        break
		        ;;
		    "Abort")
		   		echo "Aborting..."
		        exit
		        ;;
		    *) echo "invalid option $REPLY";;
		esac
	done
	#read -p "Press Enter to continue."	
	echo ""
	
	# generate main config file for grub
	echo "Generate main config file for grub"
	arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
	#read -p "Press Enter to continue."
	echo ""
	
	# set root password
	echo "Set root password"
	arch-chroot /mnt passwd
	#read -p "Press Enter to continue."
	echo ""
	
	# config visudo
	echo "Config Visudo"
	arch-chroot /mnt  sed -i '/^# %wheel ALL=(ALL) ALL/s/^# //' /etc/sudoers
	echo ""
	
	# Create a new user and add it to the wheel group and force user to change password at next login.
	echo "Creating $USER_NAME profile "
	arch-chroot /mnt useradd -m -G wheel $USER_NAME
	echo "Please enter $USER_NAME password "
	arch-chroot /mnt passwd $USER_NAME
	#arch-chroot /mnt passwd -e $USER_NAME
	echo ""
	
	# Basic pacman configuration
	echo "pacman configuration "
	arch-chroot /mnt sed -i "s/#VerbosePkgLists/VerbosePkgLists/" /etc/pacman.conf
	arch-chroot /mnt sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf
	echo ""
	
	echo "Install X Server and i3?"
	read -p "Continue? " -n 1 -r
	echo
	if [[ $REPLY =~ ^[Yy]$ ]]
	then
		# X install
		echo "X Install"
		pacstrap /mnt $PACSTRAP_PKG_LIST_X
		
		# Intel drivers
		pacstrap /mnt xf86-video-intel mesa lib32-mesa
		
		echo "i3 install"
		pacstrap /mnt $PACSTRAP_PKG_LIST_I3
		arch-chroot /mnt xdg-user-dirs-update
		
		echo "TERMINAL=xterm" >> /mnt/etc/environment
		echo "include /usr/share/nano-syntax-highlighting/*.nanorc" >> /mnt/etc/nanorc
		echo "set mouse" >> /mnt/etc/nanorc

		echo "QT_QPA_PLATAFORMTHEME=qt5ct" >> /mnt/etc/environment
		
		arch-chroot /mnt systemctl enable lightdm
		
		#arch-chroot /mnt ufw enable
		#arch-chroot /mnt systemctl enable ufw
		#arch-chroot /mnt systemctl start ufw
		
		echo
		echo "Config i3?"
		read -p "Continue? " -n 1 -r
		echo
		if [[ $REPLY =~ ^[Yy]$ ]]
		then
			git clone http://github.com/rtxx/i3-config.git /tmp/i3
			cp -rp /tmp/i3/. /mnt/home/$USER_NAME/
			cp -r /tmp/i3/lightdm-gtk-greeter.conf /mnt/etc/lightdm/
			chmod +x /mnt/home/$USER_NAME/.config/i3/scripts/*
			rm -rf /mnt/home/$USER_NAME/.git /mnt/home/$USER_NAME/LICENSE /mnt/home/$USER_NAME/README.md /mnt/home/$USER_NAME/breezeblack.kra /mnt/home/$USER_NAME/screenshot.png /mnt/home/$USER_NAME/screenshot2.png /mnt/home/$USER_NAME/vm-lighdm.png
		fi
	fi

	read -p "Instalation Done. Please reboot."
	exit
				
else
	echo "Please check internet connection."
fi


# Sources
# https://devhints.io/bash
# https://stackoverflow.com/questions/929368/how-to-test-an-internet-connection-with-bash
# https://stackoverflow.com/questions/1885525/how-do-i-prompt-a-user-for-confirmation-in-bash-script
# https://askubuntu.com/questions/1705/how-can-i-create-a-select-menu-in-a-shell-script
# https://serverfault.com/questions/7503/how-to-determine-if-a-bash-variable-is-empty
# https://github.com/honze-net/dalu/blob/main/example.sh
# https://github.com/jleclanche/dotfiles/blob/master/install-arch.sh
# https://stackoverflow.com/questions/34515193/sed-pacman-conf-remove-for-multilib-include
