#!/bin/bash
# simple arch installer

if [ "$EUID" -ne 0 ]
    then echo "Please run as root"
exit
fi

################ DEFAULT VALUES ################
export BOOT_SIZE=512MB
export SWAP_SIZE=2GB
export GRUB_UEFI_NAME=archlinux
export HOST_NAME=archx64
export KEYMAP=pt-latin1
export LOCALE=en_US.UTF-8
export TIMEZONE=Europe/Lisbon
export USER_NAME=vuser
export USER_NAME_PASSWORD=1234
export ROOT_PASSWORD=root

# base packages
export INSTALL_PKG_LIST_BASE=TRUE
PACSTRAP_PKG_LIST_BASE="base base-devel linux linux-firmware nano networkmanager grub efibootmgr os-prober sudo bash-completion man"

export INSTALL_PKG_LIST_EXTRAS=FALSE
PACSTRAP_PKG_LIST_EXTRAS="firefox"

# cpu microcode
export INSTALL_CPU_MICROCODE=

# x server and gpu packages
export INSTALL_PKG_LIST_X=FALSE
PACSTRAP_PKG_LIST_X="xorg-server xorg-xinit xorg-setxkbmap"

export INSTALL_PKG_X_INTEL=FALSE
PACSTRAP_PKG_LIST_INTEL="xf86-video-intel mesa lib32-mesa"

export INSTALL_PKG_X_AMD=FALSE
PACSTRAP_PKG_LIST_AMD="xf86-video-amdgpu mesa lib32-mesa"

export INSTALL_PKG_X_NVIDIA=FALSE
PACSTRAP_PKG_LIST_NVIDIA="nvidia nvidia-utils lib32-nvidia-utils mesa lib32-mesa"

export INSTALL_PKG_X_NOUVEAU=FALSE
PACSTRAP_PKG_LIST_NOUVEAU="xf86-video-nouveau mesa lib32-mesa"

# DE/WM packages
export INSTALL_PKG_DE_GNOME=FALSE
PACSTRAP_PKG_LIST_GNOME="gnome gnome-extra gdm"

export INSTALL_PKG_DE_KDE=FALSE
PACSTRAP_PKG_LIST_KDE="plasma dolphin konsole firefox sddm packagekit-qt5"

export INSTALL_PKG_DE_XFCE=FALSE
PACSTRAP_PKG_LIST_XFCE="xfce4 xfce4-goodies lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings"

export INSTALL_PKG_DE_I3=FALSE
PACSTRAP_PKG_LIST_I3="i3 i3status i3lock dmenu xterm lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings"

export INSTALL_PKG_DE_I3MY=FALSE
PACSTRAP_PKG_LIST_I3MY="i3-gaps i3status i3lock python-i3ipc dmenu noto-fonts noto-fonts-emoji ttf-fantasque-sans-mono xterm htop nethogs arandr volumeicon dunst feh picom udiskie unclutter xorg-xinput xfce4-power-manager tlp cpupower polkit polkit-gnome polkit-qt5 networkmanager nm-connection-editor network-manager-applet breeze breeze-gtk qt5ct lxappearance capitaine-cursors arc-icon-theme archlinux-wallpaper thunar tumbler ffmpegthumbnailer thunar-archive-plugin thunar-media-tags-plugin mousepad firefox neofetch scrot xdg-user-dirs lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings git gvfs gvfs-smb gvfs-mtp powertop pulseaudio pulseaudio-alsa alsa-utils pavucontrol ufw gufw gnome-keyring seahorse nano-syntax-highlighting xarchiver unrar jgmenu rxvt-unicode"


################ DISK SECTION ################
diskmenu-review() {
  clear
  echo "diskmenu-settings"
  echo
  echo Boot size partition: $BOOT_SIZE
  echo Swap size partition: $SWAP_SIZE
  echo
  echo Disk to install: $DISK
  echo Boot partition: $BOOT_PART
  echo Swap partition: $SWAP_PART
  echo Root partition: $ROOT_PART
  echo
  echo Partition type: $PARTITION_TABLE_TYPE
  echo
  echo Current partition layout, doesnt account for the new changes!
  lsblk -f
  echo 
  read -p "Press enter to continue..."
}

diskmenu-mbr() {
  clear
  echo "diskmenu-mbr"
  lsblk -f
	read -p "Disk to use (Please enter full path ie /dev/vda): " DISK
	echo
	echo "MBR - Auto Installation"
	echo "* * * Beware! All partitions will be primary! * * *"
	echo "Partition table:"
	echo " ${DISK}1 - /boot with ${BOOT_SIZE}"
	echo " ${DISK}2 - /swap with ${SWAP_SIZE}"
	echo " ${DISK}3 - /root with the remaining space"
	read -p "Press enter to continue. Ctrl+C to cancel."
  echo Disk $DISK set to install.

	export BOOT_PART=${DISK}1
  export SWAP_PART=${DISK}2
  export ROOT_PART=${DISK}3
	
	export PARTITION_TABLE_TYPE="MBR"
  read -p "Press enter to continue..."
}

diskmenu-gpt() {
  clear
  echo "diskmenu-gpt"
  lsblk -f
	read -p "Disk to use (Please enter full path ie /dev/vda): " DISK
	echo
	echo "GPT - Auto Installation"
	echo "Partition table:"
	echo " ${DISK}1 - /boot with ${BOOT_SIZE}"
	echo " ${DISK}2 - /swap with ${SWAP_SIZE}"
	echo " ${DISK}3 - /root with the remaining space"
	read -p "Press enter to continue. Ctrl+C to cancel."
  echo Disk $DISK set to install.

	export BOOT_PART=${DISK}1
  export SWAP_PART=${DISK}2
  export ROOT_PART=${DISK}3
	
	export PARTITION_TABLE_TYPE="GPT"
  read -p "Press enter to continue..."
}

diskmenu-manual() {
  clear
  echo "diskmenu-manual"
  echo "not yet supported"
  read -p "Press enter to continue..."
}

diskmenu() {
  while true; do
	clear
	echo "Disk menu"
  select diskmenu in 'Review' 'Auto formart - MBR' 'Auto format - GPT' 'Manual' 'Back'
    do
      case $REPLY in
        1) diskmenu-review ;;
        2) diskmenu-mbr ;;
        3) diskmenu-gpt ;;
        4) diskmenu-manual ;;
        5) break 2 ;;
        *) echo 'Please select an option.' >&2
      esac
      break
    done
  done
}

################ PACKAGES SECTION ################
packagesmenu-base() {
  clear
  echo "packagesmenu-base"

  while true; do
    echo Base packages to install: $PACSTRAP_PKG_LIST_BASE
    read -p "Do you wish to install? (y/n) " yn
    echo
    case $yn in
      [Yy]* ) INSTALL_PKG_LIST_BASE=TRUE; break;;
      [Nn]* ) INSTALL_PKG_LIST_BASE=FALSE; break;;
      * ) echo "Please use yes or no.";;
    esac
  done

  if [[ "$INSTALL_PKG_LIST_BASE" == "FALSE" ]]; then
    echo Base packages list set to NOT INSTALL. Please double check!
  fi

  if [[ "$INSTALL_PKG_LIST_BASE" == "TRUE" ]]; then
    echo Base packages list set to INSTALL.
  fi
  echo
  while true; do
    echo Extras packages to install: $PACSTRAP_PKG_LIST_EXTRAS
    read -p "Do you wish to install? (y/n) " yn
    echo
    case $yn in
      [Yy]* ) INSTALL_PKG_LIST_EXTRAS=TRUE; break;;
      [Nn]* ) INSTALL_PKG_LIST_EXTRAS=FALSE; break;;
      * ) echo "Please use yes or no.";;
    esac
  done

  if [[ "$INSTALL_PKG_LIST_EXTRAS" == "FALSE" ]]; then
    echo Extras packages list set to NOT INSTALL.
  fi

  if [[ "$INSTALL_PKG_LIST_EXTRAS" == "TRUE" ]]; then
    echo Extras packages list set to INSTALL.
  fi

   echo Install CPU microcode?
	  select packagesmenubasecpu in 'Intel' 'AMD' 'Back'
      do
        case $REPLY in
          1) INSTALL_CPU_MICROCODE="INTEL" ; break 2 ;;
          2) INSTALL_CPU_MICROCODE="AMD" ; break ;;
          3) break 2 ;;
          *) echo 'Please select an option.' >&2
        esac
        break
      done

  read -p "Press enter to continue..."
}

packagesmenu-x() {
  clear
  echo "packagesmenu-x"

  while true; do
    echo X packages to install: $PACSTRAP_PKG_LIST_X
    read -p "Do you wish to install? (y/n) " yn
    echo
    case $yn in
      [Yy]* ) INSTALL_PKG_LIST_X=TRUE; break;;
      [Nn]* ) INSTALL_PKG_LIST_X=FALSE; break;;
      * ) echo "Please use yes or no.";;
    esac
  done

  if [[ "$INSTALL_PKG_LIST_X" == "FALSE" ]]; then
    echo X packages list set to NOT INSTALL.
  fi

  if [[ "$INSTALL_PKG_LIST_X" == "TRUE" ]]; then
    echo X packages list set to INSTALL.
    echo
    echo Install GPU drivers?
	  select packagesmenudegpu in 'Intel' 'AMD' 'Nvidia' 'Nouveau' 'Back'
      do
        case $REPLY in
          1) INSTALL_PKG_X_INTEL=TRUE; break 2 ;;
          2) INSTALL_PKG_X_AMD=TRUE; break 2 ;;
          3) INSTALL_PKG_X_NVIDIA=TRUE; break 2 ;;
          4) INSTALL_PKG_X_NOUVEAU=TRUE; break 2 ;;
          5) break 2 ;;
          *) echo 'Please select an option.' >&2
        esac
        break
      done
  fi
  read -p "Press enter to continue..."
}

packagesmenu-de() {
	clear
  while true; do
	echo "Desktop Environments"
  echo "WARNING! Here be * many, many dragons * !  Continue at your own peril!"
	select packagesmenude in 'GNOME' 'KDE' 'XFCE' 'i3' 'i3gaps - My Configs' 'Back'
    do
      case $REPLY in
        1) INSTALL_PKG_DE_GNOME="TRUE"; echo GNOME is set to INSTALL ; break 2 ;;
        2) INSTALL_PKG_DE_KDE="TRUE"; echo KDE is set to INSTALL ; break 2 ;;
        3) INSTALL_PKG_DE_XFCE="TRUE"; echo XFCE is set to INSTALL ; break 2 ;;
        4) INSTALL_PKG_DE_I3="TRUE"; echo I3 is set to INSTALL ; break 2 ;;
        5) INSTALL_PKG_DE_I3MY="TRUE"; echo I3-My Config is set to INSTALL; break 2  ;;
        6) break 2 ;;
        *) echo 'Please select an option.' >&2
      esac
      break
    done
  done
}

packagesmenu() {
  while true; do
	clear
	echo "Packages menu"
  select packagesmenu in 'Base packages' 'X packages' 'Desktop Environments' 'Back'
    do
      case $REPLY in
        1) packagesmenu-base ;;
        2) packagesmenu-x ;;
        3) packagesmenu-de ;;
        4) break 2 ;;
        *) echo 'Please select an option.' >&2
      esac
      break
    done
  done
}

################ SETTINGS SECTION ################
settings-hostname() {
  clear
  echo Current hostname: $HOST_NAME
  read -p "Please enter new hostname: " HOST_NAME
  echo 
  read -p "Hostname set to $HOST_NAME. Press enter to continue..."
}

settings-kb() {
  clear
  echo Current keymap: $KEYMAP
  read -p "Please enter new keymap: " KEYMAP
  echo 
  read -p "Keyboard layout set to $KEYMAP. Press enter to continue..."
}

settings-locale() {
  clear
  echo Current locale: $LOCALE
  read -p "Please enter new locale: " LOCALE
  echo 
  read -p "Locale set to $LOCALE. Press enter to continue..."
  echo
  echo Current timezone: $TIMEZONE
  read -p "Please enter new timezone: " TIMEZONE
  echo 
  read -p "Timezone set to $TIMEZONE. Press enter to continue..."
}

settings-user() {
  clear
  echo Current root password: $ROOT_PASSWORD
  read -p "Please enter new root password: " ROOT_PASSWORD
  echo 
  read -p "root password set to $ROOT_PASSWORD. Press enter to continue..."
  echo
  echo Current username: $USER_NAME
  read -p "Please enter new username: " USER_NAME
  echo 
  read -p "Username set to $USER_NAME. Press enter to continue..."
  echo
  echo Current username password: $USER_NAME_PASSWORD
  read -p "Please enter new username password: " USER_NAME_PASSWORD
  echo 
  read -p "User password set to $USER_NAME_PASSWORD. Press enter to continue..."
}

settings() {
  while true; do
	clear
	echo "Settings menu"
  select packagesmenu in 'Host name' 'Keyboard Layout' 'Locale and Timezone' 'User' 'Back'
    do
      case $REPLY in
        1) settings-hostname ;;
        2) settings-kb ;;
        3) settings-locale ;;
        4) settings-user ;;
        5) break 2 ;;
        *) echo 'Please select an option.' >&2
      esac
      break
    done
  done
}



################ REVIEW SECTION ################
review() {
  clear
  echo "Review settings"
  echo 
  echo "Some settings can only be changed by editing this file!"
  echo
  echo Boot size partition: $BOOT_SIZE
  echo Swap size partition: $SWAP_SIZE
  echo
  echo Partition type: $PARTITION_TABLE_TYPE
  echo Disk to install: $DISK
  echo Boot partition: $BOOT_PART
  echo Swap partition: $SWAP_PART
  echo Root partition: $ROOT_PART
  if [[ "$PARTITION_TABLE_TYPE" == "GPT" ]]; then
    echo GRUB UEFI entry name: $GRUB_UEFI_NAME
  fi
  echo
  echo Hostname: $HOST_NAME
  echo Keyboard layout: $KEYMAP
  echo Locale: $LOCALE
  echo Timezone: $TIMEZONE
  echo Username: $USER_NAME
  echo Username password: $USER_NAME_PASSWORD
  echo Root password: $ROOT_PASSWORD
  echo
  echo Packages to install:
  if [[ "$INSTALL_PKG_LIST_BASE" == "TRUE" ]]; then
    echo Base packages : $PACSTRAP_PKG_LIST_BASE
    echo
  fi

  if [[ "$INSTALL_CPU_MICROCODE" == "INTEL" ]]; then
    echo Intel microcode package : intel-ucode
    echo
  fi
  
  if [[ "$INSTALL_CPU_MICROCODE" == "AMD" ]]; then
    echo Intel microcode package : amd-ucode
    echo
  fi

  if [[ "$INSTALL_PKG_LIST_X" == "TRUE" ]]; then
    echo X package list: $PACSTRAP_PKG_LIST_X

    if [[ "$INSTALL_PKG_X_INTEL" == "TRUE" ]]; then
     echo Intel GPU packages: $PACSTRAP_PKG_LIST_INTEL
    fi
    if [[ "$INSTALL_PKG_X_AMD" == "TRUE" ]]; then
      echo AMD GPU packages: $PACSTRAP_PKG_LIST_AMD
    fi
    if [[ "$INSTALL_PKG_X_NVIDIA" == "TRUE" ]]; then
      echo NVIDIA GPU packages: $PACSTRAP_PKG_LIST_NVIDIA
    fi
    if [[ "$INSTALL_PKG_X_NOUVEAU" == "TRUE" ]]; then
      echo NVIDIA Nouveau GPU packages: $PACSTRAP_PKG_LIST_NOUVEAU
    fi
    echo
  fi

  if [[ "$INSTALL_PKG_LIST_EXTRAS" == "TRUE" ]]; then
    echo Extras package list: $PACSTRAP_PKG_LIST_EXTRAS
    echo
  fi

  echo Desktop Environment / Windows Manager
  if [[ "$INSTALL_PKG_DE_GNOME" == "TRUE" ]]; then
    echo GNOME will be install with these packages:
    echo $PACSTRAP_PKG_LIST_GNOME
    echo
  fi
 
  if [[ "$INSTALL_PKG_DE_KDE" == "TRUE" ]]; then
    echo KDE will be install with these packages:
    echo $PACSTRAP_PKG_LIST_KDE
    echo
  fi

  if [[ "$INSTALL_PKG_DE_XFCE" == "TRUE" ]]; then
    echo XFCE will be install with these packages:
    echo $PACSTRAP_PKG_LIST_XFCE
    echo
  fi

  if [[ "$INSTALL_PKG_DE_I3" == "TRUE" ]]; then
    echo i3 will be install with these packages:
    echo $PACSTRAP_PKG_LIST_I3
    echo
  fi

  if [[ "$INSTALL_PKG_DE_I3MY" == "TRUE" ]]; then
    echo i3 - My config will be install with these packages:
    echo $PACSTRAP_PKG_LIST_I3MY
    echo
  fi

  echo 
  read -p "Press enter to continue..."
}

################ RESET SECTION ################
reset() {
  clear
  echo "Reset all settings?"
  echo

  while true; do
    read -p "Do you wish to continue? (y/n) " yn
    echo
    case $yn in
        [Yy]* ) reset-all; break;;
        [Nn]* ) break;;
        * ) echo "Please use yes or no.";;
    esac
  done
  echo 
  read -p "Press enter to continue..."
}

reset-all() {

  PARTITION_TABLE_TYPE=
  DISK=
  BOOT_PART=
  SWAP_PART=
  ROOT_PART=

  USER_NAME=vuser
  USER_NAME_PASSWORD=1234
  ROOT_PASSWORD=root

  INSTALL_PKG_LIST_BASE=TRUE
  INSTALL_PKG_LIST_EXTRAS=FALSE

  INSTALL_CPU_MICROCODE=

  INSTALL_PKG_LIST_X=FALSE
  INSTALL_PKG_X_INTEL=FALSE
  INSTALL_PKG_X_AMD=FALSE
  INSTALL_PKG_X_NVIDIA=FALSE
  INSTALL_PKG_X_NOUVEAU=FALSE

  INSTALL_PKG_DE_GNOME=FALSE
  INSTALL_PKG_DE_KDE=FALSE
  INSTALL_PKG_DE_XFCE=FALSE
  INSTALL_PKG_DE_I3=FALSE
  INSTALL_PKG_DE_I3MY=FALSE

  echo 
  read -p "Settings reseted..."

}
################ INSTALL SECTION ################

install-ok() {
  echo "Formating $DISK"
  if [[ "$PARTITION_TABLE_TYPE" == "MBR" ]]; then
		(
			echo o # Create a new empty DOS partition table
			echo n # Add /boot partition
			echo p # Primary partition
			echo 1 # Partition number
			echo   # First sector default
			echo +$BOOT_SIZE  # Size
			echo n # Add /swap partition
			echo p # Primary partition
			echo 2 # Partition number
			echo   # First sector default
			echo +$SWAP_SIZE  # Size
			echo n # Add /root partition
			echo p # Primary partition
			echo 3 # Partition number
			echo   # First sector default
			echo   # Size remaining
			echo w # Write changes
	  ) | fdisk $DISK
    echo
   
  	# formating partitions
    echo "Making filesystem"
    mkfs.ext4 "${DISK}1"
    mkswap "${DISK}2"
    mkfs.ext4 "${DISK}3"

    # mounting partitions
    echo "Mounting partitions"
    mount "${DISK}3" /mnt
    mkdir /mnt/{boot,home}
    mount "${DISK}1" /mnt/boot
    swapon "${DISK}2"
  fi
  echo

  if [[ "$PARTITION_TABLE_TYPE" == "GPT" ]]; then
		(
			echo g # Create a new empty GPT partition table
			echo n # Add /boot partition
			echo 1 # Partition number
			echo   # First sector default
			echo +$BOOT_SIZE  # Size
			echo n # Add /swap partition
			echo 2 # Partition number
			echo   # First sector default
			echo +$SWAP_SIZE  # Size
			echo n # Add /root partition
			echo 3 # Partition number
			echo   # First sector default
			echo   # Size remaining
			echo w # Write changes
		) | fdisk $DISK
    echo

		# formating partitions
    echo "Making filesystem"
		pacman -S dosfstools --noconfirm
		mkfs.fat -F32 "${DISK}1"
		mkswap "${DISK}2"
		mkfs.ext4 "${DISK}3"
		
		# mounting partitions
		echo "Mounting partitions"
		mount "${DISK}3" /mnt
		mkdir /mnt/{boot,home}
		mkdir /mnt/boot/efi
		mount "${DISK}1" /mnt/boot/efi
		swapon "${DISK}2"
  fi
  echo

	# add multilib for liveiso
	sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf
	pacman -Sy
  echo

	# pacstrap new packages
  echo Installing packages
  if [[ "$INSTALL_PKG_LIST_BASE" == "TRUE" ]]; then
    pacstrap /mnt $PACSTRAP_PKG_LIST_BASE
    echo
  fi
  
  if [[ "$INSTALL_PKG_LIST_EXTRAS" == "TRUE" ]]; then
    pacstrap /mnt $PACSTRAP_PKG_LIST_EXTRAS
    echo
  fi

  if [[ "$INSTALL_CPU_MICROCODE" == "INTEL" ]]; then
    pacstrap /mnt intel-ucode
    echo
  fi

  if [[ "$INSTALL_CPU_MICROCODE" == "AMD" ]]; then
    pacstrap /mnt amd-ucode
    echo
  fi
  echo

	# fstab gen
	echo "Generating fstab"
	genfstab -U /mnt >> /mnt/etc/fstab
	echo

	# setting timezone
	echo "Setting Timezone"
	arch-chroot /mnt timedatectl set-timezone $TIMEZONE
	echo
	
	# generate /etc/adjtime
	echo "Generate /etc/adjtime"
	arch-chroot /mnt hwclock --systohc
	echo
		
	# select locale
	echo "Selecting locale $LOCALE"
	arch-chroot /mnt sed -i "s/#$LOCALE/$LOCALE/" /etc/locale.gen
	arch-chroot /mnt locale-gen
	echo
	
	# create locale.conf
	echo "Creating locale.conf"
	echo "LANG=$LOCALE" >> /mnt/etc/locale.conf
	echo
	
	# setting keyboard layout 
	echo "Setting keyboard layout"
	echo "KEYMAP=$KEYMAP" >> /mnt/etc/vconsole.conf
	echo
	
	# setting hostname 
	echo "Setting host name"
	echo "$HOST_NAME" >> /mnt/etc/hostname
	echo
	
	# setting hosts file 
	echo "Setting hosts file"
	echo -e "127.0.0.1	localhost\n::1		localhost\n127.0.1.1	$HOST_NAME.localdomain	$HOST_NAME" >> /mnt/etc/hosts
	echo
	
	# enable networkmanager service 
	echo "Enable networkmanager service"
	arch-chroot /mnt systemctl enable NetworkManager.service
	echo	
	
	# recreate initramfs 
	echo "Recreate initramfs"
	arch-chroot /mnt mkinitcpio -P
	echo

  #grub install
	echo "GRUB Install"
  if [[ "$PARTITION_TABLE_TYPE" == "MBR" ]]; then
    arch-chroot /mnt grub-install --target=i386-pc $DISK
  fi

  if [[ "$PARTITION_TABLE_TYPE" == "GPT" ]]; then
    arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=$GRUB_UEFI_NAME
  fi
	echo
	
	# generate main config file for grub
	echo "Generate main config file for grub"
	arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
	echo

	# set root password
	echo "Set root password"
 	echo "root:$ROOT_PASSWORD" | arch-chroot /mnt chpasswd
	echo
	# config visudo
	echo "Visudo configuration"
	arch-chroot /mnt  sed -i '/^# %wheel ALL=(ALL) ALL/s/^# //' /etc/sudoers
	echo
	
	# Create a new user and add it to the wheel group.
	echo "Creating $USER_NAME profile "
	arch-chroot /mnt useradd -m -G wheel $USER_NAME
	
	# creates a new password for new user
  	echo "$USER_NAME:$USER_NAME_PASSWORD" | arch-chroot /mnt chpasswd
	echo

	# Basic pacman configuration
	echo "Pacman configuration and enabling multilib repo"
	arch-chroot /mnt sed -i "s/#VerbosePkgLists/VerbosePkgLists/" /etc/pacman.conf
	arch-chroot /mnt sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf
	echo

  # X server configuration
  echo "X server configuration"
  if [[ "$INSTALL_PKG_LIST_X" == "TRUE" ]]; then
    pacstrap /mnt $PACSTRAP_PKG_LIST_X
    if [[ "$INSTALL_PKG_X_INTEL" == "TRUE" ]]; then
      pacstrap /mnt $PACSTRAP_PKG_LIST_INTEL
    fi
    if [[ "$INSTALL_PKG_X_AMD" == "TRUE" ]]; then
      pacstrap /mnt $PACSTRAP_PKG_LIST_AMD
    fi
    if [[ "$INSTALL_PKG_X_NVIDIA" == "TRUE" ]]; then
      pacstrap /mnt $PACSTRAP_PKG_LIST_NVIDIA
    fi
    if [[ "$INSTALL_PKG_X_NOUVEAU" == "TRUE" ]]; then
      pacstrap /mnt $PACSTRAP_PKG_LIST_NOVEAU
    fi
  fi
  echo

  # DE/WM configuration
  echo "DE/WM configuration"
  if [[ "$INSTALL_PKG_DE_GNOME" == "TRUE" ]]; then
    pacstrap /mnt $PACSTRAP_PKG_LIST_GNOME
    arch-chroot /mnt systemctl enable gdm
  fi
 
  if [[ "$INSTALL_PKG_DE_KDE" == "TRUE" ]]; then
    pacstrap /mnt $PACSTRAP_PKG_LIST_KDE
    arch-chroot /mnt systemctl enable sddm
    echo
  fi

  if [[ "$INSTALL_PKG_DE_XFCE" == "TRUE" ]]; then
    pacstrap /mnt $PACSTRAP_PKG_LIST_XFCE
    arch-chroot /mnt systemctl enable lightdm
    echo
  fi

  if [[ "$INSTALL_PKG_DE_I3" == "TRUE" ]]; then
    pacstrap /mnt $PACSTRAP_PKG_LIST_I3
    arch-chroot /mnt systemctl enable lightdm
    echo
  fi

  if [[ "$INSTALL_PKG_DE_I3MY" == "TRUE" ]]; then
    pacstrap /mnt $PACSTRAP_PKG_LIST_I3MY
    arch-chroot /mnt systemctl enable ufw
    arch-chroot /mnt systemctl enable lightdm

    # download install script from my repo
    curl https://raw.githubusercontent.com/rtxx/i3-config/main/install -o install

    # permission to execute
    chmod +x install

    # moves to home dir
    mv install /mnt/home/$USER_NAME/
    echo "Please run sudo 'install' on 1st login with $USER_NAME account, located on home."
    
    
  fi
  echo 

  read -p "Install done!. Press enter to continue..."
}

install() {
  review
  echo  
  while true; do
    read -p "Install arch with the above configuration? (y/n) " yn
    echo
    case $yn in
      [Yy]* ) install-ok; break ;;
      [Nn]* ) break;;
      * ) echo "Please use yes or no.";;
    esac
  done
}

################ MAIN MENU SECTION ################
while true; do
clear
echo "Arch minimal install"
  select mainMenu in 'Disk Managment' 'Select packages' 'Settings' 'Review' 'Install' 'Reset' 'Quit'
  do
    case $REPLY in
      1) diskmenu ;;
      2) packagesmenu ;;
      3) settings ;;
      4) review ;;
      5) install ;;
      6) reset ;;
      7) break 2 ;;
      *) echo 'Please select an option.' >&2
    esac
    break
  done
done
